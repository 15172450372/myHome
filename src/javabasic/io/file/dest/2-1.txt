eam("file.txt"));
1
2
2.调用 ObjectInputStream 对象的readObject()方法读取流中的对象，该方法返回一个 Object 类型的 Java 对象，如果程序知道该 Java 对象的类型，则可以将该对象强制类型转换成其真实的类型。如下代码所示。

//从输入流中读取一个 Java 对象，并将起强制类型转换为 Test 类
Test t = (Test) ois.readObject();
1
2
三、实例

下面程序定义了一个 Student 类，这个 Student 就是一个普通的 Java 类，只是实现了 Serializable 接口，该接口标识该类的对象是可序列化的。
public class Student implements java.io.Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    private int num;
    private String name;
    public Student(int num, String name) {
        this.num = num;
        this.name = name;
    }
    public int getNum() {
        return num;
    }
    public void setNum(int num) {
        this.num = num;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
下面程序使用 ObjectOutputStream 将一个 Student 对象写入磁盘文件
public class WriteObjcect {

    public static void main(String[] args) {
        try {
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("Student.txt"));
            Student stu = new Student(1,"吴彦祖");
            oos.writeObject(stu);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
--------------------- 
版权声明：本文为CSDN博主「k7_silent」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/k7_slient/article/details/80575043{
        return num;
    }
    public void setNum(int num) {
        this.num = num;
    }

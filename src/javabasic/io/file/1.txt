首先介绍一下对象序列化的目标：对象序列化的目标是将对象保存到磁盘中，或允许在网络中直接传输对象。

一、序列化的含义和意义： 
序列化机制使得对象可以脱离程序的运行而独立存在。 
对象的序列化指将一个Java对象写入IO流中，与此对应的反是，对象的反序列化则指从IO流中恢复该Java对象。

如果需要需要让某个对象支持序列化机制，则必须让它的类是可序列化的（serializable）。为了让某个类是可序列化的，该类必须实现如下两个接口之一：

Serializable
Externalizable
Serializable接口是一个标记接口，实现该接口无需实现任何方法，它只是表明该类的实例是可序列化的。 
所有需要保存到磁盘里的对象的类都应该可序列化。

二、使用对象流实现序列化（使用Serializable接口） 
使用 Serializable 来实现序列化非常简单，主要让目标类实现 Serializable 标记接口即可，无须实现任何方法。

一旦某个类实现了 Serializable 接口，该类的对象就是可序列化的，程序可以通过如下两个步骤来序列化该对象。
1.创建一个 ObjectOutputStream，这个输出流是一个处理流，所以必须建立在其他节点流的基础上。如下代码所示。

//创建 ObjectOutputStream 输出流
ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("file.txt))；
1
2
2.调用 ObjectOutputStream 对象的writeObject()方法输出可序列化对象。如下代码所示。

//将一个对象输出到输出流中
oos.writeObject(text);
1
2
如果希望从二进制流中恢复 Java对象，则需要使用反序列化。反序列化的步骤如下.
1.创建一个 ObjectInputStream 输入流，这个输入流是一个处理流，所以必须建立在其他节点流的基础之上。如下代码所示。

//创建一个ObjectInputStream()输入流
ObjectInputStream ois = new ObjectInputStream(new FileInputstream("file.txt"));
1
2
2.调用 ObjectInputStream 对象的readObject()方法读取流中的对象，该方法返回一个 Object 类型的 Java 对象，如果程序知道该 Java 对象的类型，则可以将该对象强制类型转换成其真实的类型。如下代码所示。

//从输入流中读取一个 Java 对象，并将起强制类型转换为 Test 类
Test t = (Test) ois.readObject();
1
2
三、实例

下面程序定义了一个 Student 类，这个 Student 就是一个普通的 Java 类，只是实现了 Serializable 接口，该接口标识该类的对象是可序列化的。
public class Student implements java.io.Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    private int num;
    private String name;
    public Student(int num, String name) {
        this.num = num;
        this.name = name;
    }
    public int getNum() {
        return num;
    }
    public void setNum(int num) {
        this.num = num;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
下面程序使用 ObjectOutputStream 将一个 Student 对象写入磁盘文件
public class WriteObjcect {

    public static void main(String[] args) {
        try {
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("Student.txt"));
            Student stu = new Student(1,"吴彦祖");
            oos.writeObject(stu);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
--------------------- 
版权声明：本文为CSDN博主「k7_silent」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/k7_slient/article/details/80575043